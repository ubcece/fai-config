#! /bin/bash

# Script to install GRUB when installing an RPM-based target OS.
#
# In contrast, when installing .deb packages of GRUB, the postinst script can
# automatically run /sbin/grub-install.  See hooks/debconf.DEB_BASED.

error=0; trap 'error=$(($?>$error?$?:$error))' ERR # save maximum error code

. /usr/lib/fai/subroutines

# Given two lists, each represented as a comma-delimited string, produce a
# comma-delimited string consisting of the first element of the first list
# followed by all of the other elements of the second list.
#
# Example: bootorder 2,4,0,3 4,2,0,3   ===> 2,4,0,3
# Example: bootorder 2,4,0,3 5,2,4,0,3 ===> 5,2,4,0,3
bootorder() {
    IFS=, read -r -a old_order <<<"$1"
    IFS=, read -r -a new_order <<<"$2"
    echo -n "${old_order[0]}"
    for n in "${new_order[@]}"; do
        [ "$n" != ${old_order[0]} ] && echo -n ",$n"
    done
}

# Find the physical devices on which the given partitions reside, tracing
# through MD and LVM layers if necessary.
# See also hooks/debconf.DEB_BASED
resolve_to_phys_dev() {
    stat -L --format '%t %T %n' $@ | while read -r major_hex minor_hex dev ; do
        major=$((0x$major_hex))
        minor=$((0x$minor_hex))
        if [ -e "/sys/dev/block/$major:$minor/device" ]; then
            # This is a physical device
            echo "$dev"
        elif [ -f "/sys/dev/block/$major:$minor/partition" ]; then
            # This is a partition
            resolve_to_phys_dev "/dev/$(basename $(dirname $(readlink /sys/dev/block/$major:$minor)))"
        elif [ -d "/sys/dev/block/$major:$minor/slaves" ]; then
            # This is a MD or LVM member
            for slave in /sys/dev/block/$major:$minor/slaves/* ; do
                resolve_to_phys_dev "/dev/$(basename $slave)"
            done
        fi
    done | sort -u
}

if ifclass GRUB_EFI && [ -L "$target/etc/grub2-efi.cfg" ]; then
    if ! mountpoint -q $target/boot/efi ; then
        echo "ERROR: /boot/efi is not a mount point"
        exit 1
    fi

    # According to https://fedoraproject.org/wiki/GRUB_2 :
    #
    #     grub2-install shouldn't be used on EFI systems. The grub2-efi package
    #     installs a prebaked grubx64.efi on the EFI System partition, which
    #     looks for grub.cfg on the ESP in /EFI/fedora/ whereas the
    #     grub2-install command creates a custom grubx64.efi, deletes the
    #     original installed one, and looks for grub.cfg in /boot/grub2/.
    #
    # However, it would be a good idea to (re-)generate the GRUB configuration.
    $ROOTCMD grub2-mkconfig -o /etc/grub2-efi.cfg
    if [ $? = 0 ]; then
        echo "Generated GRUB (EFI) configuration"
    else
        echo "ERROR: Failed to generate GRUB (EFI) configuration"
    fi

    # Installing GRUB generally changes the boot order to put the newly added
    # GRUB entry first.  Put the previous first-choice boot preference, noted
    # in hooks/defvar.GRUB_EFI.source,  back in front.
    if [ -n "$PREV_EFI_BOOTORDER" ]; then
        NEW_EFI_BOOTORDER=$(efibootmgr | awk '$1 == "BootOrder:" { print $2 }')
        efibootmgr -o "$(bootorder "$PREV_EFI_BOOTORDER" "$NEW_EFI_BOOTORDER")"
    fi

elif ifclass GRUB_PC; then
    case "$FAI_ACTION" in
      install|dirinstall)
         # Get $BOOT_DEVICE from disk config
        . $LOGDIR/disk_var.sh

        if ifclass DISK2 ; then
            bootdisks=$(echo $disklist | awk '{printf "/dev/%s /dev/%s", $1, $2}')
        elif [ -n "$BOOT_DEVICE" ]; then
            bootdisks=$(resolve_to_phys_dev "$BOOT_DEVICE")
        elif [ -x /usr/bin/debconf-get-selections ]; then
            # Hopefully doing a dirinstall of an RPM-based OS from a
            # Debian-based OS?
            bootdisks=$(debconf-get-selections | awk '
                $1 == "grub-pc" && $2 == "grub-pc/install_devices" && $3 == "multiselect" {
                    $1 = $2 = $3 = "";
                    print;
                }
            ' | sed -e 's/^\s\+//')
        else
            # Desperate effort: use all disks that FAI has detected
            set_disk_info
        fi

        if [ -z "$bootdisks" ]; then
            echo "ERROR: Boot disk could not be determined"
            exit 1
        fi

        for disk in $bootdisks ; do
            $ROOTCMD /usr/sbin/grub2-install --no-floppy $disk

            if [ $? = 0 ]; then
                echo "Installed GRUB (BIOS) on $disk"
            else
                echo "ERROR: Failed to install GRUB (BIOS) on $disk"
            fi
        done
        ;;
    esac
fi


exit $error
