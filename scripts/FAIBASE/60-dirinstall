#!/bin/bash

# When performing a dirinstall, create an fstab by swapping the root and
# altroot mount points.

if [ "$FAI_ACTION" != dirinstall ]; then
    exit
fi

if [ -z "$target" -o "$target" = / ]; then
    echo "ERROR: Installation target not defined. /etc/fstab not created."
    exit 1
fi

fstab=/etc/fstab

if [ ! -r "$fstab" ]; then
    echo "ERROR: Could not read $fstab"
fi

NEW_FSTAB=$(awk -v target="$target" '
    # First pass: read fstab
    (NR == FNR) && !/^#/ {
        match($0, /^[^ \t]+[ \t]*([^ \t]+[ \t]*)/, captures);
        MOUNT_POINTS[$2] = captures[1];
    }

    ENDFILE {
        for (mount_point in MOUNT_POINTS) {
            if (index(mount_point, target) == 1) {
                other = substr(mount_point, 1 + length(target));
                if (other == "") { other = "/"; }
                NEW_MOUNT_POINTS[mount_point] = MOUNT_POINTS[other];
                NEW_MOUNT_POINTS[other] = MOUNT_POINTS[mount_point];
            }
        }
    }

    # Second pass: swap mount points and create directories
    (NR != FNR) {
        if (!/^#/ && ($2 in NEW_MOUNT_POINTS)) {
            # Setting $2 = NEW_MOUNT_POINTS[$2], but preserving whitespace
            $0 = gensub(/^([^ \t]*[ \t]*)([^ \t]*[ \t]*)/, "\\1" NEW_MOUNT_POINTS[$2], 1);
        }
        print $0;
    }
    (NR != FNR) && !/^#/ && $2 ~ "^/" {
        MKDIR_ERR = MKDIR_ERR || system(sprintf("mkdir -p \"%s%s\"", target, $2));
    }
    END {
        if (MKDIR_ERR) {
            print "ERROR: Failed to create mount point directories."
            exit MKDIR_ERR;
        }
    }
    ' "$fstab" "$fstab")

echo "$NEW_FSTAB" > "$target$fstab" &&
echo "$target$fstab created."
