#! /bin/bash

error=0; trap 'error=$(($?>$error?$?:$error))' ERR # save maximum error code

# Convert dotted-quad netmask to CIDR
# https://forum.openwrt.org/viewtopic.php?pid=220781#p220781
mask2cdr() {
    # Assumes there's no "255." after a non-255 byte in the mask
    local x=${1##*255.}
    set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
    x=${1%%$3*}
    echo $(( $2 + (${#x}/4) ))
}


# Given a traditional Linux interface name (e.g. "eth0"), find out what the
# persistent name would be.  We use the same prioritization rule as in the
# default NamePolicy setting in /lib/systemd/network/99-default.link
# (NamePolicy=kernel databae onboard slot path).  See NamePolicy in
# https://www.freedesktop.org/software/systemd/man/systemd.link.html and
# https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/
alt_ifname() {
    local IFNAME="$1"
    $ROOTCMD udevadm test --action=ADD "/sys/class/net/$IFNAME" 2>/dev/null |
    awk -F= '
        /=/ { VAL[$1] = $2 }
        END {
            split("FROM_DATABASE,ONBOARD,SLOT,PATH", POLICIES, ",");
            for (p in POLICIES) {
                if (VAL["ID_NET_NAME_" POLICIES[p]]) {
                     print VAL["ID_NET_NAME_" POLICIES[p]];
                     break;
                }
            }
        }
    '
}

netplan_yaml() {
    local IFNAME="$1"
    local METHOD="$2"
    echo     "Generating netplan configuration for $IFNAME ($METHOD)" >&2
    echo     "# generated by FAI"
    echo     '# Run `netplan apply` after editing.'
    echo     "network:"
    echo     "    version: 2"
    ifclass SERVER ||
    echo     "    renderer: NetworkManager"
    echo     "    ethernets:"
    echo     "        $IFNAME:"
    case "$METHOD" in
      dhcp)
        echo "            dhcp4: true"
        ;;
      static)
        echo "            addresses: [$IPADDR/$(mask2cdr $NETMASK)]"
        echo "            gateway4: $GATEWAYS"
        echo "            nameservers:"
        echo "                search: [$DOMAIN]"
        echo "                addresses: [${DNSSRVS// /, }]"
        ;;
    esac
}

iface_stanza() {
    local IFNAME="$1"
    local METHOD="$2"
    echo "Generating interface configuration for $IFNAME ($METHOD)" >&2
    echo "# generated by FAI"
    echo "auto $IFNAME"
    echo "iface $IFNAME inet $METHOD"
    case "$METHOD" in
      static)
        echo "    address $IPADDR"
        echo "    netmask $NETMASK"
        echo "    broadcast $BROADCAST"
        echo "    gateway $GATEWAYS"
        if [ -n "$DNSSRVS" ]; then
            echo "    dns-nameservers $DNSSRVS"
            echo "    dns-search $DOMAIN"
        fi
        ;;
    esac
}

case "$FAI_ACTION" in
  install|dirinstall)
    ifclass DHCPC && METHOD=dhcp || METHOD=static

    if [ -d $target/etc/netplan ]; then
        # Ubuntu >= 17.10 with netplan.io
        [ -n "$NIC1" ] && for NIC in "$NIC1" $(alt_ifname "$NIC1") ; do
            netplan_yaml $NIC $METHOD > $target/etc/netplan/01-${NIC}.yaml
        done
        fcopy -iMr /etc/netplan
    elif [ -d $target/etc/network/interfaces.d ]; then
        # ifupdown >= 0.7.41 (Debian >= 8, Ubuntu >= 14.04)
        iface_stanza lo loopback > $target/etc/network/interfaces.d/lo
        [ -n "$NIC1" ] && for NIC in "$NIC1" $(alt_ifname "$NIC1") ; do
            iface_stanza $NIC $METHOD > \
                $target/etc/network/interfaces.d/$NIC
        done
        fcopy -iMr /etc/network/interfaces.d
        fcopy -iM /etc/network/interfaces
    else
        (
            iface_stanza lo loopback
            [ -n "$NIC1" ] && for NIC in "$NIC1" $(alt_ifname "$NIC1") ; do
                iface_stanza $NIC $METHOD
            done
        ) > $target/etc/network/interfaces
        fcopy -iM /etc/network/interfaces
    fi

    if ! ifclass DHCPC ; then
        [ -n "$NETWORK" ] && echo "localnet $NETWORK" > $target/etc/networks
        if [ ! -L $target/etc/resolv.conf -a -e /etc/resolv.conf ]; then
            cp -p /etc/resolv.conf $target/etc
        fi
    fi
    ;;
esac

# here fcopy is mostly used, when installing a client for running in a
# different subnet than during the installation
fcopy -iM /etc/resolv.conf
fcopy -iM /etc/networks

exit $error
