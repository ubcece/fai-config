#! /bin/bash

error=0; trap 'error=$(($?>$error?$?:$error))' ERR # save maximum error code

. /usr/lib/fai/subroutines

# Given two lists, each represented as a comma-delimited string, produce a
# comma-delimited string consisting of the first element of the first list
# followed by all of the other elements of the second list.
#
# Example: bootorder 2,4,0,3 4,2,0,3   ===> 2,4,0,3
# Example: bootorder 2,4,0,3 5,2,4,0,3 ===> 5,2,4,0,3
bootorder() {
    IFS=, read -r -a old_order <<<"$1"
    IFS=, read -r -a new_order <<<"$2"
    echo -n "${old_order[0]}"
    for n in "${new_order[@]}"; do
        [ "$n" != ${old_order[0]} ] && echo -n ",$n"
    done
}

if ifclass GRUB_EFI && ! mountpoint -q $target/boot/efi ; then
    echo "ERROR: /boot/efi is not a mount point"
    exit 1
fi

case "$FAI_ACTION" in
  install|dirinstall)
    # The grub-pc postinst script will have run grub-install automatically
    # (see hooks/debconf.DEB_BASED).
    #
    # The grub-efi-amd64 postinst script re-runs grub-install automatically,
    # but only to reinstall an existing bootloader that already exists in the
    # EFI directory.
    if ifclass GRUB_EFI; then
        if ! $ROOTCMD /usr/sbin/grub-install; then
            echo "ERROR: Failed to install GRUB (EFI)"
        else
            echo "Installed GRUB (EFI)"
            # Installing GRUB generally changes the boot order to put the newly
            # added GRUB entry first.  Put the previous first-choice boot
            # preference, noted in hooks/defvar.GRUB_EFI.source,  back in front.
            if [ -n "$PREV_EFI_BOOTORDER" ]; then
                NEW_EFI_BOOTORDER=$(efibootmgr | awk '$1 == "BootOrder:" { print $2 }')
                efibootmgr -o "$(bootorder "$PREV_EFI_BOOTORDER" "$NEW_EFI_BOOTORDER")"
            fi
        fi
    fi

    ;;
esac

exit $error
