#!/usr/bin/perl

package FAI::ECE::Auth;

use Carp;
use CGI;
use Net::Domain qw(hostfqdn);
use POSIX qw(strftime);
BEGIN {
    eval {
        require Digest::SHA1 && Digest::SHA1->import(qw(sha1_hex));
    } || eval {
        require Digest::SHA  && Digest::SHA->import(qw(sha1_hex));
    }
}
use feature qw(say);
use strict;

our $keydist_file_root = '/var/lib/fai-keydist';

my $host_fqdn = hostfqdn;
my $secret_file = "$keydist_file_root/$host_fqdn/etc/ssh/ssh_host_rsa_key";
open SECRETFILE, '<', $secret_file or die "Could not open $secret_file: $!";
my $secret = join '', <SECRETFILE>;
close SECRETFILE;

sub hash {
    my ($time, $host_or_mac) = @_;
    return sha1_hex(sprintf('%s:%s:%s', $time, $secret, $host_or_mac));
}

sub generate_hash {
    my ($host_or_mac) = @_;
    my $time = time;
    my $hash = hash($time, $host_or_mac);
    return {
        auth => $hash,
        time => $time,
    };
}

sub verify_hash {
    my ($hash, $host, $mac, $max_delay) = @_;

    my $hash_len = length FAI::ECE::Auth::hash;
    my ($auth, $time) = ((substr $hash, 0, $hash_len), (substr $hash, $hash_len));
    if (time - $time >= $max_delay) {
        printf STDERR "Received hash %s: Authorization expired at %s\n",
            $hash, strftime("%FT%T", localtime($time + $max_delay));
        return undef;
    }

    my $correct_host_hash = hash($time, $host);
    if ($auth eq $correct_host_hash) {
        return 1;
    }

    my $correct_mac_hash = hash($time, $mac || '');
    if ($auth eq $correct_mac_hash) {
        return 1;
    }
    return undef;
}

sub cgimain {
    my ($q) = @_;

    my $host = $q->param('host');
    if (!defined $host || 0 == length $host) {
        say "Status: 400 Request Error\r\n";
        say "Content-Type: text/plain";
        say "Missing host parameter";
        return;
    }
    my $credentials = generate_hash($host);

    say "Content-Type: text/plain\r\n";
    say $credentials->{auth} . $credentials->{time};
}

sub main {
    my @argv = @_;
    my ($host_or_mac) = @argv;
    if (!defined $host_or_mac || 0 == length $host_or_mac) {
        croak "Must specify hostname or MAC address to generate an authentication hash";
    }

    my $credentials = generate_hash($host_or_mac);
    say $credentials->{auth} . $credentials->{time};
}

package main;

if (my $running_in_require_context = (caller(0))[7]) {
    return 1;
} elsif ($ENV{GATEWAY_INTERFACE} =~ m!^CGI/1!) {
    FAI::ECE::Auth::cgimain(CGI->new);
} else {
    FAI::ECE::Auth::main(@ARGV);
}
