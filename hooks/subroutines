# vim: set ts=4 sw=4 et si syntax=bash:

# FAI executes these default tasks in the following order:
#   confdir     Mount or obtain the $FAI configuration directory
#   setup       Set clock, define $FAI_FLAGS, start VTs, start sshd
#   defclass    Define classes
#   defvar      Source $FAI/$class/*.var and /tmp/fai/additional.var
#   action      Decide action - sysinfo, install, softupdate, or custom action
#   sysinfo     If action=sysinfo, show hardware info, mount /target readonly
#   install     If action=install, 3 beeps, call tasks partition...savelog
#   dirinstall  If action=dirinstall, call tasks extrbase...finish, savelog
#   softupdate  If action=softupdate, update an existing installation
#
#   partition   Run setup-storage, write /tmp/fai/disk_var.sh and fstab
#   mountdisks  Mount partitions using /tmp/fai/fstab relative to $FAI_ROOT
#   extrbase    Run debootstrap (use /var/tmp/base.tgz as a shortcut)
#   mirror      If $FAI_DEBMIRROR is NFS, mount it to $MNTPOINT
#   debconf     Fill debconf database by running `fai-debconf $FAI/debconf`
#   prepareapt  Set up resolv.conf and other files for the next task updatebase
#   updatebase  Mount /proc et al, make diversions, apt-key add, apt-get update
#   instsoft    Install packages as directed by $FAI/package_config
#   configure   Call scripts in $FAI/scripts/ and subdirectories
#   tests       Call scripts in $FAI/tests/ and subdirectories
#   finish      Unmount target filesystems, undo fai-divert diversions
#   chboot      Execute fai-chboot on the server
#   savelog     Copy local logs to account $LOGUSER on $LOGSERVER
#
#   faiend      Wait for bg jobs to finish, reboot if appropriate
#
# Most hooks are called before the task of the same name.  This file,
# $FAI/hooks/subroutines, is a special case.  It is called in the early stages
# of the setup task, which is the earliest opportunity for the contents of the
# $FAI configuration directory to influence anything.  Note that this means
# that there is no confdir or setup hook, since the $FAI configuration space is
# not yet available at the time that those hooks would run.
#
# In addition to completing the establishment of the $FAI configuration
# directory, you can define and override FAI builtin functions here.
#
# Since this file is sourced by bash rather than executed, please take care to
# avoid introducing unintentional side effects.  A good convention to follow
# would be to wrap as much functionality as possible in shell functions with
# local variables.  The shell functions should be named ece_something() to
# distinguish them from FAI builtin functions.

######################################################################
# Override functions in /usr/lib/fai/subroutines
######################################################################

task_chboot() {
    echo "Running fai-chboot on server to disable PXE booting for this client"
    wget -nv -O - --post-data="host=$HOSTNAME.$DOMAIN&auth=$auth" \
         "https://$SERVER/fai/chboot"
    if [ $? != 0 ]; then
        task_error 3
        echo "WARNING: fai-chboot failed."
    fi
}

task_savelog() {
    mkdir -p $FAI_ROOT/var/lib/{lib,log}/fai
    fai-savelog -l
    [ -f $LOGDIR/FAI_CLASSES ] && cp -pu $LOGDIR/FAI_CLASSES $FAI_ROOT/var/lib/fai
    [ -f $LOGDIR/disk_var.sh ] && cp -pu $LOGDIR/disk_var.sh $FAI_ROOT/var/lib/fai
    ece_savelog_remote
}

######################################################################
# Additional functionality
######################################################################

# Obtains an auth key for FAI by authenticating with a username and password
# against the FAI server.  On success, returns 0 and outputs the auth key to
# STDOUT.  The username and password prompts as well as error messages are
# printed to /dev/tty.
#
# Up to two arguments are accepted.  The first is the timeout, in seconds, for
# the username prompt.  The default is to wait forever.  If no username is
# input within the timeout interval, then the function returns 1.  The second
# optional argument is the number of times to try authenticating.  The default
# is to retry until it succeeds or is cancelled with Ctrl-C.
ece_fai_auth() {
    local timeout tries_left username password
    local status

    timeout="$1"
    if [ -n "$timeout" ]; then
        timeout="-t $timeout"
    fi
    tries_left="$2"

    status=2
    while [ -z "$tries_left" ] || [ "$tries_left" -gt 0 ] ; do
        [ -z "$tries_left" ] || tries_left=$(( $tries_left - 1 ))

        IFS= read -p 'Username: ' $timeout -e -r username
        if [ $? != 0 ]; then
            echo >/dev/tty
            echo 'Timed out.' >/dev/tty
            return $?
        fi
        if [ -z "$username" ]; then
            continue
        fi

        # wget has idiotic password-prompting behavior.  You can pass the
        # password on the command-line, which exposes it to `ps`, or you can
        # use the --ask-password option.  With --ask-password, the input is
        # read from /dev/tty, but the prompt is printed to STDOUT, which
        # pollutes the output.  (src/main.c: prompt_for_password())
        #wget -q -O- --user="$username" --ask-password "https://$SERVER/fai/auth?host=$HOSTNAME.$DOMAIN"
        #case $? in
        #  0) return 0 ;;
        #  4) echo "ERROR: Network failure." >/dev/tty ;;
        #  5) echo "ERROR: SSL verification failure for server $SERVER." >/dev/tty ;;
        #  6) echo "ERROR: Authentication failure." >/dev/tty ;;
        #  8) echo "ERROR: Unexpected problem on server $SERVER." >/dev/tty ;;
        #  *) echo "ERROR: Unexpected wget exit status $?." >/dev/tty ;;
        #esac

        IFS= read -p 'Password: ' -e -r -s password
        echo >/dev/tty

        (
            # curl's normal content output goes to curl's STDERR, which is this
            # function's STDOUT.  curl's error messages go to its STDOUT, which
            # is filtered by sed, whose STDOUT is connected to /dev/tty.
            # Because the pipefail shell option is set, if curl fails, $? is
            # set to curl's exit status rather than sed's exit status.
            shopt -q -s -o pipefail
            exec 2>&1 1>/dev/tty
            echo "user=$username:$password" | \
              curl -K- -fsS --output /dev/stderr --stderr - -G --data-urlencode host="$HOSTNAME.$DOMAIN" "https://$SERVER/fai/auth" | \
              sed -e 's/^curl: (22) The requested URL returned error: 401$/ERROR: Authorization failure/' \
                  -e 's/^curl: ([0-9]*)/ERROR:/'
        )
        status=$?
        [ $status = 0 ] && return 0

        [ -n "$tries_left" ] && echo "$tries_left more tries..." >/dev/tty
    done
    return $status
}

ECE_PUB_HS_DIRS=( /etc/ssh )

# Downloads host-specific keys.  Error messages, if any, are directed to
# STDOUT.  Exit status is that of wget.
ece_setup_fetchkeys() {
    local status wget_verbosity

    wget_verbosity=-nv
    (
        umask 077 ;
        wget $wget_verbosity --recursive -e robots=off --level=0 \
             --directory-prefix=/tmp/keydist --no-host-directories --cut-dirs=2 \
             --post-data="host=$HOSTNAME.$DOMAIN&auth=$auth" \
             "https://$SERVER/fai/keydist"
    )
    status=$?
    case $status in
      0) : ;;
      4) echo "ERROR: Network failure."
         return $status ;;
      5) echo "ERROR: SSL verification failure for server $SERVER."
         return $status ;;
      6) echo "ERROR: Authentication failure."
         return $status ;;
      8) echo "ERROR: Unexpected problem on server $SERVER."
         return $status ;;
      *) echo "ERROR: Unexpected wget exit status $?."
         return $status ;;
    esac

    # Remove the manifest file
    rm -f /tmp/keydist/keydist

    find /tmp/keydist -type d -exec chmod 755 {} +
    find /tmp/keydist -type f | while read f ; do
        case ${f##*/} in
          *.pub|*.crt|*.pem)
            chmod 644 "$f"
            ;;
          *)
            (
              for dir in ${ECE_PUB_HS_DIRS[@]} ; do
                [ "$f" = "$dir" ] && exit 0
              done
            ) || \
            chmod 700 "${f%/*}"
            ;;
        esac
    done

    rsync -arR /tmp/keydist/./ /
}

ece_sync_keys_to_target() {
    rsync -arR /tmp/keydist/./ "$target"
}

ece_savelog_remote() {
    local uploads
    for i in $LOGDIR/* ; do
        uploads="$uploads -F file=@$i"
    done
    # wget does not support file uploads; use curl
    curl -f -o- -F host="$HOSTNAME.$DOMAIN" -F auth="$auth" \
                -F action="$FAI_ACTION" -F rundate="$fai_rundate" \
                $uploads \
                "https://$SERVER/fai/savelog"
}

ece_setup_git() {
    local saved_pwd old_ref new_ref ref desc
    local git_cmd

    git_cmd="git --work-tree=$FAI --git-dir=$FAI/.git"
    if [ -n "$FAI_CONFIG_SRC_REF" ]; then
        # git-checkout a particular branch, tag, or commit of the configuration
        # space
        old_ref=`$git_cmd rev-parse HEAD`
        $git_cmd checkout "$FAI_CONFIG_SRC_REF"
        new_ref=`$git_cmd rev-parse HEAD`

        if [ "$new_ref" != "$old_ref" ]; then
            echo "Checked out $FAI_CONFIG_SRC_REF of $FAI_CONFIG_SRC."
            echo "Running $FAI/hooks/subroutines again."
            . $FAI/hooks/subroutines
            return
        fi
    fi

    case "$FAI_CONFIG_SRC_REF" in
      ''|master)
        # If on the master branch, generate a Subversion-like revision number
        # by counting the number of commits in the history
        desc="master r`$git_cmd rev-list --first-parent --abbrev-commit HEAD | wc -l`" ;;
      *)
        desc="`$git_cmd describe --all`" ;;
    esac
    ref=`$git_cmd rev-list --max-count=1 --abbrev-commit HEAD`
    echo "Using git ref $ref of $FAI_CONFIG_SRC ($desc)"
}

ece_setup_fetchkeys_failure() {
    local message
    message="$1"

    define_fai_flags
    if [ "$root" != /dev/nfs ] || [ "$flag_createvt" ]; then
        # Not PXE, or PXE with FAI_FLAGS=createvt.  It should be safe to drop
        # to a root shell (or automatically reboot, if FAI_FLAGS includes
        # "reboot").
        echo "$message  Aborting $FAI_ACTION."
        unset FAI_ACTION
        return 1
    else
        # Dropping to a root shell would present a security risk.
        echo "$message  Reboot!"
        faireboot
    fi
}

ece_setup_hook() {
    local status

    case "$FAI_CONFIG_SRC" in
      git*) ece_setup_git ;;
    esac

    case "$FAI_ACTION" in
      sysinfo|softupdate)
        : ;;
      *) # install|dirinstall|''
        if ! ece_setup_fetchkeys ; then
            # Only exit status 6 (authorization failure) is recoverable by
            # authentication.  However, we will treat all errors as if they could
            # be addressed by reauthenticating.
            echo "ERROR: Failed to fetch keys.  Let's reauthenticate and try again."
            auth=`ece_fai_auth 300 5`
            status=$?
            if [ $status != 0 ]; then
                ece_setup_fetchkeys_failure "Authentication timed out.  Nobody there?"
            elif ! ece_setup_fetchkeys ; then
                ece_setup_fetchkeys_failure "Still failed to fetch keys."
            fi
        fi
        ;;
    esac
}

ece_setup_hook


# 2007-09-16 Chris Dumont
# See "FAI and secrets.txt" for extensive background.
# This script attempts to be idempotent.

######################################################
# 2012-02-21 Chris Dumont. This is for fai-client 3.4.7 and 3.4.8. In
# /usr/lib/fai/subroutines task_setup (line 254?) calls ntpdate which is
# deprecated. Check if the next bit is still a necessary replacement.

if [ $do_init_tasks -eq 1 ] ; then
  dpkg -l fai-client 2>&1 | egrep -q "fai-client *3.4.7 |fai-client *3.4.8 "
  if [ $? -eq 1 ]; then
    echo "fai-client version number has advanced. Maybe I'm no longer needed. Pausing so you can examine the situation"
    sleep 3649
  else
    ntpd -g -q
  fi
fi
######################################################
