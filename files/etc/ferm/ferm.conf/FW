# vim: filetype=sh ts=2 sw=2 et:

def $dns_servers = (`/etc/ferm/fermcat dns_servers`);
def $dns_clients = (`/etc/ferm/fermcat dns_clients`);
def $ftp_servers = (`/etc/ferm/fermcat ftp_servers`);
def $ssh_servers = (`/etc/ferm/fermcat ssh_servers`);
def $smtp_servers = (`/etc/ferm/fermcat smtp_servers`);
def $smtp_clients = (`/etc/ferm/fermcat smtp_clients`);
def $imap_servers = (`/etc/ferm/fermcat imap_servers`);
def $pop3_servers = (`/etc/ferm/fermcat pop3_servers`);
def $http_servers = (`/etc/ferm/fermcat http_servers`);
def $pmx_servers = (`/etc/ferm/fermcat pmx_servers`);
def $soc_firewalls = (`/etc/ferm/fermcat soc_firewalls`);
def $ubc1_servers = (`/etc/ferm/fermcat ubc1_servers`);
def $ubc1_clients = (`/etc/ferm/fermcat ubc1_clients`);
def $ubc2_servers = (`/etc/ferm/fermcat ubc2_servers`);
def $ubc2_clients = (`/etc/ferm/fermcat ubc2_clients`);
def $manlan_clients = (`/etc/ferm/fermcat manlan_clients`);
def $iccs01_clients = (`/etc/ferm/fermcat iccs01_clients`);
def $ubc_vpn_iapv2 = (`/etc/ferm/fermcat ubc_vpn_iapv2`);

def $matlab_lmservers = 137.82.58.7;
def $matlab_lmports = (1706 1711);
def $matlab_lmclients = (`/etc/ferm/fermcat matlab_clients`);

def $opnet_lmservers = 137.82.57.201;
def $opnet_lmclients = (`/etc/ferm/fermcat opnet_clients`);

def $cmctc_clients = (`/etc/ferm/fermcat cmctc_clients`);
def $cmctc_servers = (`/etc/ferm/fermcat cmctc_servers`);

def $ansys_lmservers = 137.82.52.194;
def $ansys_lmports = 1024:;
def $ansys_lmclients = (`/etc/ferm/fermcat ansys_clients`);

def $cadtools_lmservers = 137.82.56.70;
def $cadtools_lmports = 27000:33000;
def $cadtools_lmclients = (`/etc/ferm/fermcat cadtools_clients`);

def $passnet_clients = (`/etc/ferm/fermcat passnet_clients`);
def $passnet_servers = (`/etc/ferm/fermcat passnet_servers`);

# define all the subnets
def $subnet52_network = 137.82.52.0;
def $subnet52_netmask = 255.255.255.0;
def $subnet52_brdcast = 137.82.52.255;

def $subnet56_network = 137.82.56.0;
def $subnet56_netmask = 255.255.255.0;
def $subnet56_brdcast = 137.82.56.255;

def $subnet57_network = 137.82.57.0;
def $subnet57_netmask = 255.255.255.0;
def $subnet57_brdcast = 137.82.57.255;

def $subnet58_network = 137.82.58.0;
def $subnet58_netmask = 255.255.255.0;
def $subnet58_brdcast = 137.82.58.255;

def $subnet84_network = 137.82.84.64;
def $subnet84_netmask = 255.255.255.224;
def $subnet84_brdcast = 137.82.84.95;

def $subnet94_network = 137.82.94.0;
def $subnet94_netmask = 255.255.255.0;
def $subnet94_brdcast = 137.82.94.255;

def $subnet120_network = 137.82.120.0;
def $subnet120_netmask = 255.255.255.0;
def $subnet120_brdcast = 137.82.120.255;

def $subnet121_network = 137.82.121.0;
def $subnet121_netmask = 255.255.255.0;
def $subnet121_brdcast = 137.82.121.255;

def $subnet223_network = 137.82.223.0;
def $subnet223_netmask = 255.255.255.0;
def $subnet223_brdcast = 137.82.223.255;

def $subnet251a_network = 137.82.251.0;
def $subnet251a_netmask = 255.255.255.128;
def $subnet251a_brdcast = 137.82.251.127;

def $subnet251b_network = 137.82.251.128;
def $subnet251b_netmask = 255.255.255.128;
def $subnet251b_brdcast = 137.82.251.255;

def $subnet252_network = 137.82.252.0;
def $subnet252_netmask = 255.255.255.0;
def $subnet252_brdcast = 137.82.252.255;

def $subnet255a_network = 137.82.255.0;
def $subnet255a_netmask = 255.255.255.128;
def $subnet255a_brdcast = 137.82.255.127;

def $subnet255b_network = 137.82.255.128;
def $subnet255b_netmask = 255.255.255.192;
def $subnet255b_brdcast = 137.82.255.191;

def $subnet255c_network = 137.82.255.192;
def $subnet255c_netmask = 255.255.255.192;
def $subnet255c_brdcast = 137.82.255.255;

def $subnet106_network = 142.103.106.192;
def $subnet106_netmask = 255.255.255.192;
def $subnet106_brdcast = 142.103.106.255;

def $subnet138_network = 142.103.138.0;
def $subnet138_netmask = 255.255.255.128;
def $subnet138_brdcast = 142.103.138.127;

def $subnet251c_network = 137.82.251.192;
def $subnet251c_netmask = 255.255.255.224;
def $subnet251c_brdcast = 137.82.251.223;

def $subnet251d_network = 137.82.251.224;
def $subnet251d_netmask = 255.255.255.240;
def $subnet251d_brdcast = 137.82.251.239;

def $subnet251e_network = 137.82.251.240;
def $subnet251e_netmask = 255.255.255.240;
def $subnet251e_brdcast = 137.82.251.255;

# define which 'network' is on which set of vlan interfaces
def $eece_extif   = eth0.83;
def $eece_intif   = eth1.83;
def $manlan_extif = eth0.217;
def $manlan_intif = eth1.217;
def $civl1_extif  = eth0.218;
def $civl1_intif  = eth1.218;
def $civl2_extif  = eth0.219;
def $civl2_intif  = eth1.219;
def $apsc_extif   = eth0.220;
def $apsc_intif   = eth1.220;
def $it_extif     = eth0.224;
def $it_intif     = eth1.224;
def $iapv2_extif  = eth0.1000;
def $iapv2_intif  = eth1.1000;
def $debian_extif = eth0.1894;
def $debian_intif = eth1.1894;
def $iccs01_extif = eth0.1500;
def $iccs01_intif = eth1.1500;

# define which 'network' has which blocks of IP addresses on it
def $eece_networks = ("$subnet52_network/$subnet52_netmask" "$subnet56_network/$subnet56_netmask" "$subnet57_network/$subnet57_netmask" "$subnet58_network/$subnet58_netmask" "$subnet94_network/$subnet94_netmask" "$subnet120_network/$subnet120_netmask" "$subnet121_network/$subnet121_netmask" "$subnet223_network/$subnet223_netmask" "$subnet251a_network/$subnet251a_netmask" "$subnet251b_network/$subnet251b_netmask" "$subnet252_network/$subnet252_netmask" "$subnet138_network/$subnet138_netmask" "$subnet255a_network/$subnet255a_netmask" "$subnet255b_network/$subnet255b_netmask" "$subnet255c_network/$subnet255c_netmask");
def $eece_smurf_addresses = ($subnet52_network $subnet52_brdcast $subnet56_network $subnet56_brdcast $subnet57_network $subnet57_brdcast $subnet58_network $subnet58_brdcast $subnet94_network $subnet94_brdcast $subnet120_network $subnet120_brdcast $subnet121_network $subnet121_brdcast $subnet223_network $subnet223_brdcast $subnet251a_network $subnet251a_brdcast $subnet251b_network $subnet251b_brdcast $subnet252_network $subnet252_brdcast $subnet138_network $subnet138_brdcast $subnet255a_network $subnet255a_brdcast $subnet255b_network $subnet255b_brdcast $subnet255c_network $subnet255c_brdcast);

def $manlan_networks        = "$subnet106_network/$subnet106_netmask";
def $manlan_smurf_addresses = ($subnet106_network $subnet106_brdcast);

def $debian_networks        = 137.82.84.40/29;
def $debian_smurf_addresses = (137.82.84.40 137.82.84.47);

def $iccs01_networks        = "142.103.178.192/26;
def $iccs01_smurf_addresses = (142.103.178.192 142.103.178.255);

def $civl1_networks         = "$subnet251c_network/$subnet251c_netmask";
def $civl1_smurf_addresses  = ($subnet251c_network $subnet251c_brdcast);

def $civl2_networks         = "$subnet251d_network/$subnet251d_netmask";
def $civl2_smurf_addresses  = ($subnet251d_network $subnet251d_brdcast);

def $apsc_networks          = "$subnet251e_network/$subnet251e_netmask";
def $apsc_smurf_addresses   = ($subnet251e_network $subnet251e_brdcast);

def $it_networks            = "$subnet84_network/$subnet84_netmask";
def $it_smurf_addresses     = ($subnet84_network $subnet84_brdcast);

#option iptables
#option automod
#option clearall       #must be after "option iptables"
#option createchains

def $all_extif = ($eece_extif $manlan_extif $civl1_extif $civl2_extif $apsc_extif $iapv2_extif $iccs01_extif $it_extif $debian_extif);
def $all_intif = ($eece_intif $manlan_intif $civl1_intif $civl2_intif $apsc_intif $iapv2_intif $iccs01_intif $it_intif $debian_intif);

chain INPUT   policy ACCEPT;
chain OUTPUT  policy ACCEPT;
chain FORWARD policy drop;

chain FORWARD {
  mod physdev physdev-in ( $eece_extif )   goto eece_extif;
  mod physdev physdev-in ( $eece_intif )   goto eece_intif;
  mod physdev physdev-in ( $iapv2_extif )  ACCEPT;
  mod physdev physdev-in ( $iapv2_intif )  ACCEPT;
  mod physdev physdev-in ( $manlan_extif ) goto manlan_extif;
  mod physdev physdev-in ( $manlan_intif ) goto manlan_intif;
  mod physdev physdev-in ( $iccs01_extif ) goto iccs01_extif;
  mod physdev physdev-in ( $iccs01_intif ) goto iccs01_intif;
  mod physdev physdev-in ( $debian_extif ) goto debian_extif;
  mod physdev physdev-in ( $debian_intif ) goto debian_intif;
  mod physdev physdev-in ( $apsc_extif )   goto apsc_extif;
  mod physdev physdev-in ( $apsc_intif )   goto apsc_intif;
  mod physdev physdev-in ( $it_extif )     goto it_extif;
  mod physdev physdev-in ( $it_intif )     goto it_intif;
  mod physdev physdev-in ( $civl1_extif )  goto civl1_extif;
  mod physdev physdev-in ( $civl1_intif )  goto civl1_intif;
  mod physdev physdev-in ( $civl2_extif )  goto civl2_extif;
  mod physdev physdev-in ( $civl2_intif )  goto civl2_intif;
}

chain eece_extif {
  ## What's this?
  ACCEPT protocol ( tcp ) saddr ( 142.103.210.123 );

  ## Transmogrifier
  ACCEPT protocol ( tcp udp )
    saddr ( 137.82.27.49 137.82.27.161 )
    daddr ( 137.82.84.241 ) dport ( 161 );

  ## InterMapper
  ACCEPT protocol ( tcp udp )
    saddr ( 137.82.37.253 );

  ## VPN
  # rules for VPN pool ece.ugrd (ECE Undergraduate Students)
  #ACCEPT saddr ( 142.103.166.0/24 );
  # rules for VPN pool ece.grad (ECE Graduate Students)
  #ACCEPT saddr ( 142.103.167.0/25 );
  # rules for VPN pool ece.prof (ECE Faculty and Staff)
  ACCEPT saddr ( 142.103.167.128/26 );
  # rules for VPN pool ece.root (ECE System Administrators)
  ACCEPT saddr ( 142.103.167.192/27 );
  # rules for VPN pool ece.othr (ECE Guests, etc.)
  #ACCEPT saddr ( 142.103.167.224/27 );

  # allow all access a-claremont.apsc.ubc.ca (APSC Exchange Server)
  ACCEPT protocol ( tcp udp ) daddr ( 142.103.119.242 );
  # allow all access a-grouse2.apsc.ubc.ca (APSC File Server)
  ACCEPT protocol ( tcp udp ) daddr ( 142.103.119.211);

  # nasty FMIS stuff (FIXME)
  ACCEPT protocol ( tcp udp ) saddr ( $ubc1_servers ) daddr ( $ubc1_clients );
  ACCEPT protocol ( tcp udp ) saddr ( $ubc2_servers ) daddr ( $ubc2_clients );
  protocol ( udp tcp ) dport ( 135 137 138 139 445 ) {
    # prevent incoming netbios packets from all hosts
    DROP;
  }
  # rules for icmp
  DROP   protocol icmp icmp-type ( ping )
    daddr ( $eece_smurf_addresses 137.82.84.240 137.82.84.255 );
  ACCEPT protocol icmp icmp-type ( ping pong )
    daddr ( $eece_networks 137.82.84.240/28 );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded )
    daddr ( $eece_networks 137.82.84.240/28 );
  # rules for standard tcp/udp services
  ACCEPT protocol ( tcp udp ) dport ( domain )       daddr ( $dns_servers );
  ACCEPT protocol ( tcp )     dport ( ftp ftp-data ) daddr ( $ftp_servers );
  ACCEPT protocol ( tcp )     dport ( ssh )          daddr ( $ssh_servers );
  ACCEPT protocol ( tcp )     dport ( smtp smtps )   daddr ( $smtp_servers );
  ACCEPT protocol ( tcp )     dport ( submission )   daddr ( $smtp_servers );
  ACCEPT protocol ( tcp )     dport ( imaps )        daddr ( $imap_servers );
  ACCEPT protocol ( tcp )     dport ( pop3s )        daddr ( $pop3_servers );
  ACCEPT protocol ( tcp )     dport ( http https )   daddr ( $http_servers );
  ACCEPT protocol ( tcp )     dport ( 18080 28080 )  daddr ( $pmx_servers );
  # rules for other tcp/udp services
  ACCEPT protocol ( tcp ) dport ( http https )
    daddr ( 137.82.52.102 )
    saddr ( 142.103.55.42 );  # Jean Chang of Internal Audit
  ACCEPT protocol ( udp ) dport ( tftp )
    daddr ( 137.82.52.18 137.82.52.56 )
    saddr ( "$subnet106_network/$subnet106_netmask" );
  ACCEPT protocol ( tcp ) dport ( 4103 4105 )
    daddr ( $soc_firewalls )
    saddr ( 130.15.52.0/24 );
  ACCEPT protocol ( tcp ) dport ( 1720 )
    daddr ( $cmctc_servers )
    saddr ( $cmctc_clients );
  ACCEPT protocol ( udp ) dport ( 5000:5016 )
    daddr ( $cmctc_servers )
    saddr ( $cmctc_clients );
  ACCEPT protocol ( tcp ) dport ( $matlab_lmports )
    daddr ( $matlab_lmservers )
    saddr ( $matlab_lmclients );
  ACCEPT protocol ( tcp udp )
    daddr ( $opnet_lmservers )
    saddr ( $opnet_lmclients );
  ACCEPT protocol ( tcp udp ) dport ( $ansys_lmports )
    daddr ( $ansys_lmservers )
    saddr ( $ansys_lmclients );
  ACCEPT protocol ( tcp ) dport ( $cadtools_lmports )
    daddr ( $cadtools_lmservers )
    saddr ( $cadtools_lmclients );
  ACCEPT protocol ( tcp ) dport ( 161 )
    daddr ( 137.82.84.241 )
    saddr ( $manlan_clients );
  # ACCEPT connections to netapp1 & morty from wernicke
  ACCEPT protocol ( tcp udp )
    saddr ( 142.103.107.14 )
    daddr ( 137.82.52.142 137.82.223.90 );
  # ACCEPT connections to lersse-p4.ece.ubc.ca
  ACCEPT protocol ( tcp ) dport ( 1666 )
    daddr ( 137.82.52.106 );
  # ACCEPT connections to perforce.ece.ubc.ca from VPN and IAPv2
  ACCEPT protocol ( tcp ) dport ( 1666 )
    daddr ( 137.82.52.140 )
    saddr ( $ubc_vpn_iapv2 );
  # ACCEPT connections to dev.ece.ubc.ca from VPN and IAPv2
  ACCEPT protocol ( tcp ) dport ( http https )
    daddr ( 137.82.52.240 )
    saddr ( $ubc_vpn_iapv2 );
  # ACCEPT connections to webgoat.ece.ubc.ca from VPN and IAPv2
  ACCEPT protocol ( tcp ) dport ( http https 8180 )
    daddr ( 137.82.52.86 )
    saddr ( $ubc_vpn_iapv2 );
  # ACCEPT anonymous FTP connections / Matei Ripeanu / RT62897
  ACCEPT protocol ( tcp ) dport ( 5672 )
    daddr ( 137.82.252.120 )
    saddr ( 169.91.0.0/16 131.247.22.0/24 );
  # ACCEPT (ChrisD personal) openvpn to wankel (non-standard port)
  ACCEPT protocol ( udp ) dport ( 1195 )
    daddr ( 137.82.52.52 );
  # ACCEPT expected incoming packets
  ACCEPT daddr ( $eece_networks 137.82.84.240/24 ) mod conntrack ctstate ( ESTABLISHED RELATED );
  ACCEPT protocol ( tcp udp ) daddr ( 137.82.52.254 ) dport ( 9443 );
  REJECT reject-with icmp-port-unreachable;
}

chain eece_intif {
  ## VPN
  # rules for VPN pool ece.ugrd (ECE Undergraduate Students)
  #ACCEPT daddr ( 142.103.166.0/24 );
  # rules for VPN pool ece.grad (ECE Graduate Students)
  #ACCEPT daddr ( 142.103.167.0/25 );
  # rules for VPN pool ece.prof (ECE Faculty and Staff)
  ACCEPT daddr ( 142.103.167.128/26 );
  # rules for VPN pool ece.root (ECE System Administrators)
  ACCEPT daddr ( 142.103.167.192/27 );
  # rules for VPN pool ece.othr (ECE Guests, etc.)
  #ACCEPT daddr ( 142.103.167.224/27 );

  # nasty FMIS stuff (FIXME)
  ACCEPT protocol ( tcp udp )  saddr ( $ubc1_clients ) daddr ( $ubc1_servers );
  ACCEPT protocol ( tcp udp )  saddr ( $ubc2_clients ) daddr ( $ubc2_servers );
  # prevent outgoing netbios packets from all (malicious?) internal hosts
  DROP   protocol ( udp tcp ) dport ( 135 137 138 139 445 );

  protocol ( tcp udp ) dport ( domain ) {
    ACCEPT saddr ( $dns_clients );
    REJECT reject-with icmp-port-unreachable; # DROP outbound domain lookups (libresolv exploit prevention)
  }
  protocol ( tcp ) dport ( smtp ssmtp ) {
    ACCEPT saddr ( $smtp_clients );
    ACCEPT saddr ( 137.82.52.207 ) daddr ( 72.14.205.109 ); # RT 57241
    REJECT reject-with icmp-port-unreachable; # DROP outbound smtp/smtps (spam prevention)
  }
  ACCEPT saddr ( $eece_networks 137.82.84.240/24 ) mod conntrack ctstate ( NEW ESTABLISHED RELATED );
  REJECT reject-with icmp-port-unreachable;
}

chain manlan_extif {
  ## special rules
  # rules for VPN pool ece.root
  ACCEPT saddr ( 142.103.167.192/27 );
  # ssh should be safe enough
  ACCEPT protocol ( tcp ) dport ( ssh );
  # rules for vtun
  ACCEPT protocol ( tcp udp ) dport ( 5000 ) daddr ( 142.103.106.250 );
  # rules for other tcp/udp services
  ACCEPT protocol ( tcp ) dport ( 5800 5900 );
  ACCEPT protocol ( tcp udp )
    saddr ( $manlan_clients );
  ACCEPT protocol ( tcp udp )
    daddr ( $passnet_servers ) saddr ( $passnet_clients );
  # rules for icmp
  DROP   protocol icmp icmp-type ( ping )
    daddr ( $manlan_smurf_addresses );
  ACCEPT protocol icmp icmp-type ( ping pong )
    daddr ( $manlan_networks );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded )
    daddr ( $manlan_networks );
  ACCEPT daddr ( $manlan_networks ) mod conntrack ctstate ( ESTABLISHED RELATED );
  REJECT reject-with icmp-port-unreachable;
}

chain manlan_intif {
  # rules for icmp
  ACCEPT protocol icmp icmp-type ( ping pong );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded );
  ACCEPT saddr ( $manlan_networks ) mod conntrack ctstate ( NEW ESTABLISHED RELATED );
  REJECT reject-with icmp-port-unreachable;
}

chain iccs01_extif {
  # rules for other tcp/udp services
  ACCEPT protocol ( tcp udp ) saddr ( $iccs01_clients );
  # rules for icmp
  DROP   protocol icmp icmp-type ( ping )
    daddr ( $iccs01_smurf_addresses );
  ACCEPT protocol icmp icmp-type ( ping pong )
    daddr ( $iccs01_networks );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded )
    daddr ( $iccs01_networks );
  ACCEPT daddr ( $iccs01_networks ) mod conntrack ctstate ( ESTABLISHED RELATED );
  REJECT reject-with icmp-port-unreachable;
}

chain iccs01_intif {
  # rules for icmp
  ACCEPT protocol icmp icmp-type ( ping pong );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded );
  ACCEPT saddr ( $iccs01_networks ) mod conntrack ctstate ( NEW ESTABLISHED RELATED );
  REJECT reject-with icmp-port-unreachable;
}

chain debian_extif {
  ACCEPT daddr ( $debian_networks );
  REJECT reject-with icmp-port-unreachable;
}

chain debian_intif {
  ACCEPT saddr ( $debian_networks );
  REJECT reject-with icmp-port-unreachable;
}

chain civl1_extif {
  # rules for icmp
  DROP   protocol icmp icmp-type ( ping )
    daddr ( $civl1_smurf_addresses );
  ACCEPT protocol icmp icmp-type ( ping pong )
    daddr ( $civl1_networks );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded )
    daddr ( $civl1_networks );
  DROP   protocol icmp;
  ACCEPT daddr ( $civl1_networks );
  REJECT reject-with icmp-port-unreachable;
}

chain civl1_intif {
  # rules for icmp
  ACCEPT protocol icmp icmp-type ( ping pong );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded );
  DROP   protocol icmp;
  ACCEPT saddr ( $civl1_networks );
  REJECT reject-with icmp-port-unreachable;
}

chain civl2_extif {
  # rules for icmp
  DROP   protocol icmp icmp-type ( ping )
    daddr ( $civl2_smurf_addresses );
  ACCEPT protocol icmp icmp-type ( ping pong )
    daddr ( $civl2_networks );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded )
    daddr ( $civl2_networks );
  DROP   protocol icmp;
  ACCEPT daddr ( $civl2_networks );
  REJECT reject-with icmp-port-unreachable;
}

chain civl2_intif {
  # rules for icmp
  ACCEPT protocol icmp icmp-type ( ping pong );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded );
  DROP   protocol icmp;
  ACCEPT saddr ( $civl2_networks );
  REJECT reject-with icmp-port-unreachable;
}

chain apsc_extif {
  # rules for icmp
  DROP   protocol icmp icmp-type ( ping )
    daddr ( $apsc_smurf_addresses );
  ACCEPT protocol icmp icmp-type ( ping pong )
    daddr ( $apsc_networks );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded )
    daddr ( $apsc_networks );
  DROP   protocol icmp;
  ACCEPT daddr ( $apsc_networks ) ;
  REJECT reject-with icmp-port-unreachable;
}

chain apsc_intif {
  # rules for icmp
  ACCEPT protocol icmp icmp-type ( ping pong );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded );
  DROP   protocol icmp;
  ACCEPT saddr ( $apsc_networks ) ;
  REJECT reject-with icmp-port-unreachable;
}

chain it_extif {
  # rules for icmp
  DROP   protocol icmp icmp-type ( ping )
    daddr ( $it_smurf_addresses );
  ACCEPT protocol icmp icmp-type ( ping pong )
    daddr ( $it_networks );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded )
    daddr ( $it_networks );
  DROP   protocol icmp;
  ACCEPT daddr ( $it_networks ) mod conntrack ctstate ( ESTABLISHED RELATED );
  REJECT reject-with icmp-port-unreachable;
}

chain it_intif {
  # rules for icmp
  ACCEPT protocol icmp icmp-type ( ping pong );
  ACCEPT protocol icmp icmp-type ( destination-unreachable time-exceeded );
  DROP   protocol icmp;
  ACCEPT saddr ( $it_networks ) mod conntrack ctstate ( NEW ESTABLISHED RELATED );
  REJECT reject-with icmp-port-unreachable;
}

