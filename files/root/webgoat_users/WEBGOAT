#!/usr/bin/python

"""
Generate series of numbered accounts for WebGoat with random passwords,
replacing any existing accounts in spring-security.xml.
"""

from glob import glob
from itertools import chain
from subprocess import check_output

def pwgen(*args, **kwargs):
    """
    Run the pwgen command with the given command-line arguments, and yield
    each line of output.
    """
    args = list(chain.from_iterable(
        ['-' + k, str(v)] for k, v in kwargs.items())
    ) + list(args)
    for pw in check_output(['/usr/bin/pwgen'] + args).rstrip().split('\n'):
        yield pw

def sql_insert_statements(user):
    """
    asdf
    """
    return '\n'.join([
        """INSERT INTO WEB_GOAT_USER (USERNAME, PASSWORD, ROLE) VALUES ({0}, {1}, {2});""".format(*sql_str_escape(user['name'], user['password'], user['authorities'])),
        """INSERT INTO USER_TRACKER (USERNAME) VALUES ({0});""".format(*sql_str_escape(user['name'])),
    ])

def sql_str_escape(*strings):
    return ["'" + s  + "'" for s in strings]

users = [
    {'name': 'group{:02d}'.format(i), 'authorities': 'WEBGOAT_USER'}
    for i in range(1, 16)
] + [
    {'name': 'admin{}'.format(i), 'authorities': 'WEBGOAT_ADMIN'}
    for i in range(1, 3)
] + [
    {'name': 'ubcit', 'authorities': 'WEBGOAT_ADMIN'}
]
users = [dict(u, password=pw) for u, pw in zip(users, pwgen(N=len(users)))]
for u in users:
    print(sql_insert_statements(u))
