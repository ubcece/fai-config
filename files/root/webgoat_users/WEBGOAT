#!/usr/bin/python

"""
Generate series of numbered accounts for WebGoat with random passwords,
replacing any existing accounts in spring-security.xml.
"""

from glob import glob
from itertools import chain
from subprocess import check_output
import xml.etree.ElementTree as ET

def pwgen(*args, **kwargs):
    """
    Run the pwgen command with the given command-line arguments, and yield
    each line of output.
    """
    args = list(chain.from_iterable(
        ['-' + k, str(v)] for k, v in kwargs.items())
    ) + list(args)
    for pw in check_output(['/usr/bin/pwgen'] + args).rstrip().split('\n'):
        yield pw

def edit_spring_users(filename, users):
    """
    Replace all children of the <user-service> element in the file with
    the given users.
    """
    ns = {
        '': 'http://www.springframework.org/schema/security',
        'beans': 'http://www.springframework.org/schema/beans',
    }
    for prefix, uri in ns.items():
        ET.register_namespace(prefix, uri)
    tree = ET.ElementTree(file=filename)
    user_service = tree.find('.//sec:user-service', dict(ns, sec=ns['']))
    user_service.clear()
    for user in users:
        el = ET.Element('{{{0}}}user'.format(ns['']), user)
        el.tail = '\n'
        user_service.append(el)
    tree.write(filename, encoding='UTF-8')

users = [
    {'name': 'group{}'.format(i), 'authorities': 'ROLE_WEBGOAT_USER'}
    for i in range(1, 31)
] + [
    {'name': 'admin{}'.format(i), 'authorities': 'ROLE_WEBGOAT_ADMIN'}
    for i in range(1, 6)
] + [
    {'name': 'tc-admin{}'.format(i), 'authorities': 'ROLE_SERVER_ADMIN'}
    for i in range(1, 6)
] + [
    {'name': 'ubcit', 'authorities': 'ROLE_WEBGOAT_ADMIN'}
]
users = [dict(u, password=pw) for u, pw in zip(users, pwgen(N=len(users)))]
for f in glob('/var/lib/tomcat?/webapps/WebGoat/WEB-INF/spring-security.xml'):
    edit_spring_users(f, users)
